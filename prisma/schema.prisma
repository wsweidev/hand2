// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_URL")
    referentialIntegrity = "prisma"
}

model Listing {
    id           String        @id @default(cuid())
    userId       String
    user         User          @relation(fields: [userId], references: [id])
    createdAt    DateTime      @default(now())
    expires      DateTime
    name         String
    description  String        @db.Text
    price        Float
    type         ListingType
    status       ListingStatus @default(listed)
    mainImageUrl String?       @default("") @db.Text
    Bid          Bid[]
    Transaction  Transaction[]
}

enum ListingType {
    bid
    sell
}

enum ListingStatus {
    sold
    listed
    canceled
}

model Bid {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    listingId String
    listing   Listing  @relation(fields: [listingId], references: [id])
    createdAt DateTime @default(now())
    amount    Float
}

model Transaction {
    id        String          @id @default(cuid())
    userId    String
    user      User            @relation(fields: [userId], references: [id])
    listingId String
    listing   Listing         @relation(fields: [listingId], references: [id])
    createdAt DateTime        @default(now())
    amount    Float
    type      TransactionType
}

enum TransactionType {
    sell
    buy
    topup
    withdraw
}

model Chat {
    id          String        @id @default(cuid())
    users       User[]
    ChatMessage ChatMessage[]
}

model ChatMessage {
    id        String   @id @default(cuid())
    chatId    String
    chat      Chat     @relation(fields: [chatId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
}

model Rating {
    id      String @id @default(cuid())
    raterId String
    user    User   @relation(fields: [userId], references: [id])
    userId  String
    stars   Int
}

// Neccessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    wallet        Int           @default(0)
    listings      Listing[]
    bids          Bid[]
    transactions  Transaction[]
    chats         Chat[]
    chatMessages  ChatMessage[]
    ratings       Rating[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Example {
    id String @id @default(cuid())
}

model Product {
    id          String  @id @default(cuid())
    name        String
    currency    String
    price       Float
    salePrice   Float?
    flag        String?
    imageUrl    String
    rating      Int
    ratingCount Int
    description String
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    content   String
}
