// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_URL")
    referentialIntegrity = "prisma"
}

model Listing {
    id              String        @id @default(cuid())
    userId          String?
    user            User?          @relation("OwnListings", fields: [userId], references: [id])
    soldToId        String?
    buyer           User?         @relation("BoughtListings", fields: [soldToId], references: [id])
    highestBidderId String?
    highestBidder   User?         @relation("HighestBid", fields: [highestBidderId], references: [id])
    createdAt       DateTime      @default(now())
    expires         DateTime
    name            String
    description     String        @db.Text
    price           Float
    type            ListingType
    status          ListingStatus @default(listed)
    mainImageUrl    String?       @default("") @db.LongText
    Bid             Bid[]
    Transaction     Transaction[]
    ChatMessage     ChatMessage[]
}

enum ListingType {
    bid
    sell
}

enum ListingStatus {
    sold
    listed
    canceled
}

model Bid {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    listingId String
    listing   Listing  @relation(fields: [listingId], references: [id])
    createdAt DateTime @default(now())
    amount    Float
}

model Transaction {
    id        String          @id @default(cuid())
    userId    String
    user      User            @relation(fields: [userId], references: [id])
    listingId String?
    listing   Listing?        @relation(fields: [listingId], references: [id])
    createdAt DateTime        @default(now())
    amount    Float
    type      TransactionType
}

enum TransactionType {
    sell
    buy
    topup
    withdraw
}

model ChatMessage {
    id                 String   @id @default(cuid())
    senderId           String
    sender             User     @relation("sentMessage", fields: [senderId], references: [id])
    receiverId         String
    receiver           User     @relation("receivedMessage", fields: [receiverId], references: [id])
    createdAt          DateTime @default(now())
    mentionedListingId String?
    mentionedListing   Listing? @relation(fields: [mentionedListingId], references: [id])
    message            String   @db.LongText
}

model Rating {
    id      String @id @default(cuid())
    raterId String
    user    User   @relation(fields: [userId], references: [id])
    userId  String
    stars   Int
}

// Neccessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String        @id @default(cuid())
    name               String?
    email              String?       @unique
    emailVerified      DateTime?
    image              String?
    accounts           Account[]
    sessions           Session[]
    wallet             Int           @default(0)
    listings           Listing[]     @relation("OwnListings")
    bids               Bid[]
    transactions       Transaction[]
    ratings            Rating[]
    boughtListings     Listing[]     @relation("BoughtListings")
    highestBidListings Listing[]     @relation("HighestBid")
    sentMessages       ChatMessage[] @relation("sentMessage")
    receivedMessages   ChatMessage[] @relation("receivedMessage")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
